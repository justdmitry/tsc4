{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(int, int, int) getSomePrecalc(int n) inline_ref {

  if (n >= 192) {
  
    if (n >= 288) {
    
      if (n >= 320) {

        if (n >= 352) {
          return (16374361185569570355515148989381228747223756609038926650176124155306760699, 26494272942318589069480525788592273303839335703403521573912286394960106973, 352);
        }

        return (3361707149818144672666187219454104827980338677164658343636350711365, 5439356428629292972296177350244602806380313370817060034433662955746, 320);
      }

      return (690168906931029935139391829792095612517948949963798093315456, 1116716749392769314599541809794537900642843628817512046429889, 288);
    }

    if (n >= 224) {

      if (n >= 256) {
        return (141693817714056513234709965875411919657707794958199867, 229265413057075367692743352179590077832064383222590237, 256);
      }

      return (29090180355503362256910111038089984964854261893, 47068900554068939361891195233676009091941690850, 224);
    }
    
    return (5972304273877744135569338397692020533504, 9663391306290450775010025392525829059713, 192);
  }

  if (n >= 96) {

    if (n >= 128) {

      if (n >= 160) {
        return (1226132595394188293000174702095995, 1983924214061919432247806074196061, 160);
      }

      return (251728825683549488150424261, 407305795904080553832073954, 128);
    }

    return (51680708854858323072, 83621143489848422977, 96);
  }

  if (n >= 32) {

    if (n >= 64) {
      return (10610209857723, 17167680177565, 64);
    }

    return (2178309, 3524578, 32);
  }

  return (0, 1, 0);

}

global int glok;

(tuple) make_result(int x, int y, int kmin2) asm """
  <{
    DUP2
    ADD
  }> PUSHCONT
  REPEAT
  1 GETGLOB
  TUPLEVAR
""";

(int, int) compute_F_n(int x, int y, int steps) asm """
  <{
    TUCK
    ADD
  }> PUSHCONT
  REPEAT
""";

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  ifnot (k) {
    return empty_tuple();
  }

  var (x, y, cur) = getSomePrecalc(n);

  ;; X is FIB_cur, Y is FIB_cur+1
  
  (x, y) = compute_F_n(x, y, n - cur);
  
  ;; now X is FIB_n
  
  if (k == 1) {
    return tpush(empty_tuple(), x);
  }

  glok = k;
  return make_result(x, y, k - 2);
}

