{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

const int au = "A"u;
const int zu = "Z"u;
const int al = "a"u;
const int zl = "z"u;
const int crcl = 26;

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  ifnot (shift % crcl) {
    return text;
  }
  
  var list = null();
  var src = text.begin_parse();
  var dest = begin_cell();
  do {
    while(src.slice_bits()) {
      int char = src~load_int(8);
      if ((char >= al) & (char <= zl)) {
        char = ((char - al + shift) % crcl) + al;
      }
      else {
        if ((char >= au) & (char <= zu)) {
          char = ((char - au + shift) % crcl) + au;
        }
      }
      dest = dest.store_int(char, 8);
    }
    if (src.slice_refs()) {
      list = cons(dest, list);
      dest = begin_cell();
      src = src~load_ref().begin_parse();
    }
    else {
      src = null();
    }
  } until (null?(src));
  
  while (~ null?(list)) {
    var c = dest.end_cell();
    dest = list~list_next().store_ref(c);
  }
  
  return dest.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(crcl - shift, text);
}

