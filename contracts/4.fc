{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

const int au = "A"u;
const int zu = "Z"u;
const int al = "a"u;
const int zl = "z"u;
const int crcl = 26;

() recv_internal() {
}

forall X -> X tpop(tuple t) asm "TPOP";
forall X -> (tuple, X) ~tpop(tuple t) asm "TPOP";
int tlen(tuple t) asm "TLEN";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {

  var s = text.begin_parse().skip_bits(32);
  var b = begin_cell().store_int(0, 32);
  var builders = empty_tuple();
  
  do {
    while(s.slice_bits()) {
      int char = s~load_int(8);
      if ((char >= au) & (char <= zu)) {
        char = ((char - au + shift) % crcl) + au;
      }
      else {
        if ((char >= al) & (char <= zl)) {
          char = ((char - al + shift) % crcl) + al;
        }
      }
      b = b.store_int(char, 8);
    }
    
    if (s.slice_refs()) {
      builders~tpush(b);
      b = begin_cell();
      s = s~load_ref().begin_parse();
    }
  } until (s.slice_empty?());
  
  repeat (builders.tlen()) {
    var c = b.end_cell();
    b = builders~tpop().store_ref(c);
  }

  return b.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(crcl - shift, text);
}

