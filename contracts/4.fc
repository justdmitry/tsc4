{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(cell) copy_and_shift(int shift, slice src, builder dest) {
  while(src.slice_bits()) {
    int byte = src~load_int(8);
    dest.store_int((byte + shift + 256) % 256, 8);
    if (src.slice_data_empty?()) {
      if (src.slice_refs()) {
        dest.store_ref(copy_and_shift(shift, src~load_ref().begin_parse(), begin_cell()));
      }
    }
  }
  return dest.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice s = text.begin_parse();
  int pref = s~load_int(32);
  if (pref != 0) { return text; }
  builder b = begin_cell().store_int(pref, 32);
  return copy_and_shift(shift, s, b);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  slice s = text.begin_parse();
  int pref = s~load_int(32);
  if (pref != 0) { return text; }
  builder b = begin_cell().store_int(pref, 32);
  return copy_and_shift(- shift, s, b);
}

