{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(int, int, int) getSomePrecalc(int n) inline_ref {
  if (n >= 350) {
    return (350, 2388987100892084569134167581129323824600775934984068529143761591653482576, 3865462327928467072415604609040860366007401579690263197296200323999931849);
  }

  if (n >= 300) {
    return (300, 84885164052257330097714121751630835360966663883732297726369399, 137347080577163115432025771710279131845700275212767467264610201);
  }

  if (n >= 250) {
    return (250, 3016128079338728432528443992613633888712980904400501, 4880197746793002076754294951020699004973287771475874);
  }

  if (n >= 200) {
    return (200, 107168651819712326877926895128666735145224, 173402521172797813159685037284371942044301);
  }

  if (n >= 150) {
    return (150, 3807901929474025356630904134051, 6161314747715278029583501626149);
  }

  if (n >= 100) {
    return (100, 135301852344706746049, 218922995834555169026);
  }

  if (n >= 50) {
    return (50, 4807526976, 7778742049);
  }

  return (2, 0, 1);
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  var res = empty_tuple();
  
  if (k == 0) {
    return res;
  }

  if (n == 0) {
    res~tpush(0);
  }
  
  if (n <= 1) {
    res~tpush(1);
  }
  
  var (cur, x, y) = getSomePrecalc(n);
  
  repeat (n + k - cur) {
    var z = x + y;
    if (cur >= n) {
      res~tpush(z);
    }
    x = y;
    y = z;
    cur = cur + 1;
  }
  
  return res;
}

