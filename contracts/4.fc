{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

const int au = "A"u;
const int zu = "Z"u;
const int al = "a"u;
const int zl = "z"u;
const int crcl = 26;

() recv_internal() {
}

(tuple) make_table(int shift) impure {
  var rtable = empty_tuple();
  var x = 0;
  repeat (127) {
    if ((x >= al) & (x <= zl)) {
      rtable~tpush(((x - al + shift) % crcl) + al);
    }
    else {
      if ((x >= au) & (x <= zu)) {
        rtable~tpush(((x - au + shift) % crcl) + au);
      }
      else {
        rtable~tpush(x);
      }
    }
    x += 1;
  }
  
  return rtable;
}

(cell) copy_and_shift(cell source, tuple table) {
  var src = source.begin_parse();
  var dest = begin_cell();
  while(src.slice_bits()) {
    int char = src~load_uint(8);
    dest = dest.store_uint(char > 127 ? char : table.at(char), 8);
  }
  if (src.slice_refs()) {
    dest = dest.store_ref(copy_and_shift(src~load_ref(), table));
  }
  return dest.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  var table = make_table(shift);
  return copy_and_shift(text, table);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  var table = make_table(- shift);
  return copy_and_shift(text, table);
}

