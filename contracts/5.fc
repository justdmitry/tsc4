{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

int tlen(tuple t) asm "TLEN";

(int, int, int) getSomePrecalc(int n) inline_ref {

  if (n >= 192) {
  
    if (n >= 288) {
    
      if (n >= 320) {

        if (n >= 352) {
          return (6254449428820551641549772190170184190608177514674331726439961915653414425, 10119911756749018713965376799211044556615579094364594923736162239653346274, 352);
        }

        return (1284057871006996373036197088663606849580363983512256652839038466984, 2077649278811148299629990130790497978399974693652401690797312244381, 320);
      }

      return (263621064469290555679241849789653324393054271110084140201023, 426547842461739379460149980002442288124894678853713953114433, 288);
    }

    if (n >= 224) {

      if (n >= 256) {
        return (54122222371037658776676579571233761483351206693809497, 87571595343018854458033386304178158174356588264390370, 256);
      }

      return (11111460156937785151929026842503960837766832936, 17978720198565577104981084195586024127087428957, 224);
    }
    
    return (2281217241465037496128651402858212007295, 3691087032412706639440686994833808526209, 192);
  }

  if (n >= 96) {

    if (n >= 128) {

      if (n >= 160) {
        return (468340976726457153752543329995929, 757791618667731139247631372100066, 160);
      }

      return (96151855463018422468774568, 155576970220531065681649693, 128);
    }

    return (19740274219868223167, 31940434634990099905, 96);
  }

  if (n >= 32) {

    if (n >= 64) {
      return (4052739537881, 6557470319842, 64);
    }

    return (832040, 1346269, 32);
  }

  return (0, 1, 2);
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  var res = empty_tuple();
  
  ifnot (k) {
    return res;
  }

  ifnot (n) {
    res~tpush(0);
  }
  
  if (n <= 1) {
    res~tpush(1);
  }
  
  var (x, y, cur) = getSomePrecalc(n);
  
  repeat (n - cur) {
    var z = x + y;
    x = y;
    y = z;
  }
  
  repeat (k - res.tlen()) {
    var z = x + y;
    res~tpush(z);
    x = y;
    y = z;
  }
  
  return res;
}

